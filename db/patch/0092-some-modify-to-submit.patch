From adf9346d02b8fb8eaca72e0e7bcbe8be26e1db7b Mon Sep 17 00:00:00 2001
From: sleepy_chord <sj702d5@foxmail.com>
Date: Sat, 17 Oct 2015 15:06:30 +0800
Subject: [PATCH 092/150] some modify to submit

---
 app/views/manage/student_lesson_info.html.erb |   21 +-
 app/views/test/index.html.erb                 |    2 +-
 public/jquery.form.js                         | 1277 +++++++++++++++++++++++++
 public/uploads/fenbi.png                      |  Bin 0 -> 9758 bytes
 public/uploads/test.txt                       |    1 +
 5 files changed, 1296 insertions(+), 5 deletions(-)
 create mode 100644 public/jquery.form.js
 create mode 100644 public/uploads/fenbi.png
 create mode 100644 public/uploads/test.txt

diff --git a/app/views/manage/student_lesson_info.html.erb b/app/views/manage/student_lesson_info.html.erb
index 04b7c89..927e887 100644
--- a/app/views/manage/student_lesson_info.html.erb
+++ b/app/views/manage/student_lesson_info.html.erb
@@ -1,5 +1,6 @@
 
   <script src="/video/video.js" type="text/javascript" charset="utf-8"></script>
+  <script src="/jquery.form.js" type="text/javascript" charset="utf-8"></script>
   <script type="text/javascript">
       // 这段代码必须放在video.js后面ss
       // 页面加载完成  才加载VideoJS的标签
@@ -30,9 +31,11 @@
                   <div class="panel-body" id="lesson-comment">实验做得不错</div>
                 </div>
             </div>
-            <form method="post" name="student_comment" target=""
-                  action="/lessons/<%=@lesson.id %>/students/<%=@student.id %>/comments.json">
-                <div class="col-md-6">
+            <form method="post" name="student_comment" target="" id="teacher-form"
+                  action="/lessons/<%=@lesson.id %>/students/<%=@student.id %>/comments.json"
+                  onsubmit="return submit_form()">
+              <!--<input name="_method" type="hidden" value="put" />-->
+              <div class="col-md-6">
                   <div class="input-group">
                     <span class="input-group-addon">学生得分</span>
                     <input type="text" class="form-control"
@@ -45,7 +48,7 @@
                       <textarea id="teacher-comment" name="student_comment[content]" style="width: 100%"></textarea>
                     </div>
                   </div>
-                  <button type="submit" class="btn btn-primary" onclick="event.preventDefault()">更改</button>
+                  <button type="submit" class="btn btn-primary">更改</button>
                 </div>
             </form>
           </div>
@@ -79,6 +82,11 @@
   </div>
 <!-- End VideoJS -->
   <script>
+
+      $.get("/lessons/<%=@lesson.id %>/students/<%=@student.id %>/comments.json",{},function(data)
+      {
+          console.log(data);
+      });
       $.get("/lessons/<%=@lesson.id %>/comments.json",{},function(data){console.log(data.lesson_comments)});
       // test case 
       data=[{id:'1',path:"/test.mp4"},{id:'2',path:"/xxx.mp4"}];
@@ -98,4 +106,9 @@
           $("video").attr("src",data[x].path);
           $("video")[0].load();
       }
+      function submit_form()
+      {
+          $("#teacher-form").ajaxSubmit(function(data){console.log(data)});
+          return false;
+      }
   </script>
diff --git a/app/views/test/index.html.erb b/app/views/test/index.html.erb
index abf51d0..b91595e 100644
--- a/app/views/test/index.html.erb
+++ b/app/views/test/index.html.erb
@@ -1,4 +1,4 @@
-<form action="/files.json" method="post">
+<form action="/files.json" method="post" enctype="multipart/form-data">
   <input type="file" name="file[file]">
   <label>name
   <input type="text" name="name">
diff --git a/public/jquery.form.js b/public/jquery.form.js
new file mode 100644
index 0000000..591ad6f
--- /dev/null
+++ b/public/jquery.form.js
@@ -0,0 +1,1277 @@
+/*!
+ * jQuery Form Plugin
+ * version: 3.51.0-2014.06.20
+ * Requires jQuery v1.5 or later
+ * Copyright (c) 2014 M. Alsup
+ * Examples and documentation at: http://malsup.com/jquery/form/
+ * Project repository: https://github.com/malsup/form
+ * Dual licensed under the MIT and GPL licenses.
+ * https://github.com/malsup/form#copyright-and-license
+ */
+/*global ActiveXObject */
+
+// AMD support
+(function (factory) {
+    "use strict";
+    if (typeof define === 'function' && define.amd) {
+        // using AMD; register as anon module
+        define(['jquery'], factory);
+    } else {
+        // no AMD; invoke directly
+        factory( (typeof(jQuery) != 'undefined') ? jQuery : window.Zepto );
+    }
+}
+
+(function($) {
+"use strict";
+
+/*
+    Usage Note:
+    -----------
+    Do not use both ajaxSubmit and ajaxForm on the same form.  These
+    functions are mutually exclusive.  Use ajaxSubmit if you want
+    to bind your own submit handler to the form.  For example,
+
+    $(document).ready(function() {
+        $('#myForm').on('submit', function(e) {
+            e.preventDefault(); // <-- important
+            $(this).ajaxSubmit({
+                target: '#output'
+            });
+        });
+    });
+
+    Use ajaxForm when you want the plugin to manage all the event binding
+    for you.  For example,
+
+    $(document).ready(function() {
+        $('#myForm').ajaxForm({
+            target: '#output'
+        });
+    });
+
+    You can also use ajaxForm with delegation (requires jQuery v1.7+), so the
+    form does not have to exist when you invoke ajaxForm:
+
+    $('#myForm').ajaxForm({
+        delegation: true,
+        target: '#output'
+    });
+
+    When using ajaxForm, the ajaxSubmit function will be invoked for you
+    at the appropriate time.
+*/
+
+/**
+ * Feature detection
+ */
+var feature = {};
+feature.fileapi = $("<input type='file'/>").get(0).files !== undefined;
+feature.formdata = window.FormData !== undefined;
+
+var hasProp = !!$.fn.prop;
+
+// attr2 uses prop when it can but checks the return type for
+// an expected string.  this accounts for the case where a form 
+// contains inputs with names like "action" or "method"; in those
+// cases "prop" returns the element
+$.fn.attr2 = function() {
+    if ( ! hasProp ) {
+        return this.attr.apply(this, arguments);
+    }
+    var val = this.prop.apply(this, arguments);
+    if ( ( val && val.jquery ) || typeof val === 'string' ) {
+        return val;
+    }
+    return this.attr.apply(this, arguments);
+};
+
+/**
+ * ajaxSubmit() provides a mechanism for immediately submitting
+ * an HTML form using AJAX.
+ */
+$.fn.ajaxSubmit = function(options) {
+    /*jshint scripturl:true */
+
+    // fast fail if nothing selected (http://dev.jquery.com/ticket/2752)
+    if (!this.length) {
+        log('ajaxSubmit: skipping submit process - no element selected');
+        return this;
+    }
+
+    var method, action, url, $form = this;
+
+    if (typeof options == 'function') {
+        options = { success: options };
+    }
+    else if ( options === undefined ) {
+        options = {};
+    }
+
+    method = options.type || this.attr2('method');
+    action = options.url  || this.attr2('action');
+
+    url = (typeof action === 'string') ? $.trim(action) : '';
+    url = url || window.location.href || '';
+    if (url) {
+        // clean url (don't include hash vaue)
+        url = (url.match(/^([^#]+)/)||[])[1];
+    }
+
+    options = $.extend(true, {
+        url:  url,
+        success: $.ajaxSettings.success,
+        type: method || $.ajaxSettings.type,
+        iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank'
+    }, options);
+
+    // hook for manipulating the form data before it is extracted;
+    // convenient for use with rich editors like tinyMCE or FCKEditor
+    var veto = {};
+    this.trigger('form-pre-serialize', [this, options, veto]);
+    if (veto.veto) {
+        log('ajaxSubmit: submit vetoed via form-pre-serialize trigger');
+        return this;
+    }
+
+    // provide opportunity to alter form data before it is serialized
+    if (options.beforeSerialize && options.beforeSerialize(this, options) === false) {
+        log('ajaxSubmit: submit aborted via beforeSerialize callback');
+        return this;
+    }
+
+    var traditional = options.traditional;
+    if ( traditional === undefined ) {
+        traditional = $.ajaxSettings.traditional;
+    }
+
+    var elements = [];
+    var qx, a = this.formToArray(options.semantic, elements);
+    if (options.data) {
+        options.extraData = options.data;
+        qx = $.param(options.data, traditional);
+    }
+
+    // give pre-submit callback an opportunity to abort the submit
+    if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) {
+        log('ajaxSubmit: submit aborted via beforeSubmit callback');
+        return this;
+    }
+
+    // fire vetoable 'validate' event
+    this.trigger('form-submit-validate', [a, this, options, veto]);
+    if (veto.veto) {
+        log('ajaxSubmit: submit vetoed via form-submit-validate trigger');
+        return this;
+    }
+
+    var q = $.param(a, traditional);
+    if (qx) {
+        q = ( q ? (q + '&' + qx) : qx );
+    }
+    if (options.type.toUpperCase() == 'GET') {
+        options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q;
+        options.data = null;  // data is null for 'get'
+    }
+    else {
+        options.data = q; // data is the query string for 'post'
+    }
+
+    var callbacks = [];
+    if (options.resetForm) {
+        callbacks.push(function() { $form.resetForm(); });
+    }
+    if (options.clearForm) {
+        callbacks.push(function() { $form.clearForm(options.includeHidden); });
+    }
+
+    // perform a load on the target only if dataType is not provided
+    if (!options.dataType && options.target) {
+        var oldSuccess = options.success || function(){};
+        callbacks.push(function(data) {
+            var fn = options.replaceTarget ? 'replaceWith' : 'html';
+            $(options.target)[fn](data).each(oldSuccess, arguments);
+        });
+    }
+    else if (options.success) {
+        callbacks.push(options.success);
+    }
+
+    options.success = function(data, status, xhr) { // jQuery 1.4+ passes xhr as 3rd arg
+        var context = options.context || this ;    // jQuery 1.4+ supports scope context
+        for (var i=0, max=callbacks.length; i < max; i++) {
+            callbacks[i].apply(context, [data, status, xhr || $form, $form]);
+        }
+    };
+
+    if (options.error) {
+        var oldError = options.error;
+        options.error = function(xhr, status, error) {
+            var context = options.context || this;
+            oldError.apply(context, [xhr, status, error, $form]);
+        };
+    }
+
+     if (options.complete) {
+        var oldComplete = options.complete;
+        options.complete = function(xhr, status) {
+            var context = options.context || this;
+            oldComplete.apply(context, [xhr, status, $form]);
+        };
+    }
+
+    // are there files to upload?
+
+    // [value] (issue #113), also see comment:
+    // https://github.com/malsup/form/commit/588306aedba1de01388032d5f42a60159eea9228#commitcomment-2180219
+    var fileInputs = $('input[type=file]:enabled', this).filter(function() { return $(this).val() !== ''; });
+
+    var hasFileInputs = fileInputs.length > 0;
+    var mp = 'multipart/form-data';
+    var multipart = ($form.attr('enctype') == mp || $form.attr('encoding') == mp);
+
+    var fileAPI = feature.fileapi && feature.formdata;
+    log("fileAPI :" + fileAPI);
+    var shouldUseFrame = (hasFileInputs || multipart) && !fileAPI;
+
+    var jqxhr;
+
+    // options.iframe allows user to force iframe mode
+    // 06-NOV-09: now defaulting to iframe mode if file input is detected
+    if (options.iframe !== false && (options.iframe || shouldUseFrame)) {
+        // hack to fix Safari hang (thanks to Tim Molendijk for this)
+        // see:  http://groups.google.com/group/jquery-dev/browse_thread/thread/36395b7ab510dd5d
+        if (options.closeKeepAlive) {
+            $.get(options.closeKeepAlive, function() {
+                jqxhr = fileUploadIframe(a);
+            });
+        }
+        else {
+            jqxhr = fileUploadIframe(a);
+        }
+    }
+    else if ((hasFileInputs || multipart) && fileAPI) {
+        jqxhr = fileUploadXhr(a);
+    }
+    else {
+        jqxhr = $.ajax(options);
+    }
+
+    $form.removeData('jqxhr').data('jqxhr', jqxhr);
+
+    // clear element array
+    for (var k=0; k < elements.length; k++) {
+        elements[k] = null;
+    }
+
+    // fire 'notify' event
+    this.trigger('form-submit-notify', [this, options]);
+    return this;
+
+    // utility fn for deep serialization
+    function deepSerialize(extraData){
+        var serialized = $.param(extraData, options.traditional).split('&');
+        var len = serialized.length;
+        var result = [];
+        var i, part;
+        for (i=0; i < len; i++) {
+            // #252; undo param space replacement
+            serialized[i] = serialized[i].replace(/\+/g,' ');
+            part = serialized[i].split('=');
+            // #278; use array instead of object storage, favoring array serializations
+            result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]);
+        }
+        return result;
+    }
+
+     // XMLHttpRequest Level 2 file uploads (big hat tip to francois2metz)
+    function fileUploadXhr(a) {
+        var formdata = new FormData();
+
+        for (var i=0; i < a.length; i++) {
+            formdata.append(a[i].name, a[i].value);
+        }
+
+        if (options.extraData) {
+            var serializedData = deepSerialize(options.extraData);
+            for (i=0; i < serializedData.length; i++) {
+                if (serializedData[i]) {
+                    formdata.append(serializedData[i][0], serializedData[i][1]);
+                }
+            }
+        }
+
+        options.data = null;
+
+        var s = $.extend(true, {}, $.ajaxSettings, options, {
+            contentType: false,
+            processData: false,
+            cache: false,
+            type: method || 'POST'
+        });
+
+        if (options.uploadProgress) {
+            // workaround because jqXHR does not expose upload property
+            s.xhr = function() {
+                var xhr = $.ajaxSettings.xhr();
+                if (xhr.upload) {
+                    xhr.upload.addEventListener('progress', function(event) {
+                        var percent = 0;
+                        var position = event.loaded || event.position; /*event.position is deprecated*/
+                        var total = event.total;
+                        if (event.lengthComputable) {
+                            percent = Math.ceil(position / total * 100);
+                        }
+                        options.uploadProgress(event, position, total, percent);
+                    }, false);
+                }
+                return xhr;
+            };
+        }
+
+        s.data = null;
+        var beforeSend = s.beforeSend;
+        s.beforeSend = function(xhr, o) {
+            //Send FormData() provided by user
+            if (options.formData) {
+                o.data = options.formData;
+            }
+            else {
+                o.data = formdata;
+            }
+            if(beforeSend) {
+                beforeSend.call(this, xhr, o);
+            }
+        };
+        return $.ajax(s);
+    }
+
+    // private function for handling file uploads (hat tip to YAHOO!)
+    function fileUploadIframe(a) {
+        var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle;
+        var deferred = $.Deferred();
+
+        // #341
+        deferred.abort = function(status) {
+            xhr.abort(status);
+        };
+
+        if (a) {
+            // ensure that every serialized input is still enabled
+            for (i=0; i < elements.length; i++) {
+                el = $(elements[i]);
+                if ( hasProp ) {
+                    el.prop('disabled', false);
+                }
+                else {
+                    el.removeAttr('disabled');
+                }
+            }
+        }
+
+        s = $.extend(true, {}, $.ajaxSettings, options);
+        s.context = s.context || s;
+        id = 'jqFormIO' + (new Date().getTime());
+        if (s.iframeTarget) {
+            $io = $(s.iframeTarget);
+            n = $io.attr2('name');
+            if (!n) {
+                $io.attr2('name', id);
+            }
+            else {
+                id = n;
+            }
+        }
+        else {
+            $io = $('<iframe name="' + id + '" src="'+ s.iframeSrc +'" />');
+            $io.css({ position: 'absolute', top: '-1000px', left: '-1000px' });
+        }
+        io = $io[0];
+
+
+        xhr = { // mock object
+            aborted: 0,
+            responseText: null,
+            responseXML: null,
+            status: 0,
+            statusText: 'n/a',
+            getAllResponseHeaders: function() {},
+            getResponseHeader: function() {},
+            setRequestHeader: function() {},
+            abort: function(status) {
+                var e = (status === 'timeout' ? 'timeout' : 'aborted');
+                log('aborting upload... ' + e);
+                this.aborted = 1;
+
+                try { // #214, #257
+                    if (io.contentWindow.document.execCommand) {
+                        io.contentWindow.document.execCommand('Stop');
+                    }
+                }
+                catch(ignore) {}
+
+                $io.attr('src', s.iframeSrc); // abort op in progress
+                xhr.error = e;
+                if (s.error) {
+                    s.error.call(s.context, xhr, e, status);
+                }
+                if (g) {
+                    $.event.trigger("ajaxError", [xhr, s, e]);
+                }
+                if (s.complete) {
+                    s.complete.call(s.context, xhr, e);
+                }
+            }
+        };
+
+        g = s.global;
+        // trigger ajax global events so that activity/block indicators work like normal
+        if (g && 0 === $.active++) {
+            $.event.trigger("ajaxStart");
+        }
+        if (g) {
+            $.event.trigger("ajaxSend", [xhr, s]);
+        }
+
+        if (s.beforeSend && s.beforeSend.call(s.context, xhr, s) === false) {
+            if (s.global) {
+                $.active--;
+            }
+            deferred.reject();
+            return deferred;
+        }
+        if (xhr.aborted) {
+            deferred.reject();
+            return deferred;
+        }
+
+        // add submitting element to data if we know it
+        sub = form.clk;
+        if (sub) {
+            n = sub.name;
+            if (n && !sub.disabled) {
+                s.extraData = s.extraData || {};
+                s.extraData[n] = sub.value;
+                if (sub.type == "image") {
+                    s.extraData[n+'.x'] = form.clk_x;
+                    s.extraData[n+'.y'] = form.clk_y;
+                }
+            }
+        }
+
+        var CLIENT_TIMEOUT_ABORT = 1;
+        var SERVER_ABORT = 2;
+                
+        function getDoc(frame) {
+            /* it looks like contentWindow or contentDocument do not
+             * carry the protocol property in ie8, when running under ssl
+             * frame.document is the only valid response document, since
+             * the protocol is know but not on the other two objects. strange?
+             * "Same origin policy" http://en.wikipedia.org/wiki/Same_origin_policy
+             */
+            
+            var doc = null;
+            
+            // IE8 cascading access check
+            try {
+                if (frame.contentWindow) {
+                    doc = frame.contentWindow.document;
+                }
+            } catch(err) {
+                // IE8 access denied under ssl & missing protocol
+                log('cannot get iframe.contentWindow document: ' + err);
+            }
+
+            if (doc) { // successful getting content
+                return doc;
+            }
+
+            try { // simply checking may throw in ie8 under ssl or mismatched protocol
+                doc = frame.contentDocument ? frame.contentDocument : frame.document;
+            } catch(err) {
+                // last attempt
+                log('cannot get iframe.contentDocument: ' + err);
+                doc = frame.document;
+            }
+            return doc;
+        }
+
+        // Rails CSRF hack (thanks to Yvan Barthelemy)
+        var csrf_token = $('meta[name=csrf-token]').attr('content');
+        var csrf_param = $('meta[name=csrf-param]').attr('content');
+        if (csrf_param && csrf_token) {
+            s.extraData = s.extraData || {};
+            s.extraData[csrf_param] = csrf_token;
+        }
+
+        // take a breath so that pending repaints get some cpu time before the upload starts
+        function doSubmit() {
+            // make sure form attrs are set
+            var t = $form.attr2('target'), 
+                a = $form.attr2('action'), 
+                mp = 'multipart/form-data',
+                et = $form.attr('enctype') || $form.attr('encoding') || mp;
+
+            // update form attrs in IE friendly way
+            form.setAttribute('target',id);
+            if (!method || /post/i.test(method) ) {
+                form.setAttribute('method', 'POST');
+            }
+            if (a != s.url) {
+                form.setAttribute('action', s.url);
+            }
+
+            // ie borks in some cases when setting encoding
+            if (! s.skipEncodingOverride && (!method || /post/i.test(method))) {
+                $form.attr({
+                    encoding: 'multipart/form-data',
+                    enctype:  'multipart/form-data'
+                });
+            }
+
+            // support timout
+            if (s.timeout) {
+                timeoutHandle = setTimeout(function() { timedOut = true; cb(CLIENT_TIMEOUT_ABORT); }, s.timeout);
+            }
+
+            // look for server aborts
+            function checkState() {
+                try {
+                    var state = getDoc(io).readyState;
+                    log('state = ' + state);
+                    if (state && state.toLowerCase() == 'uninitialized') {
+                        setTimeout(checkState,50);
+                    }
+                }
+                catch(e) {
+                    log('Server abort: ' , e, ' (', e.name, ')');
+                    cb(SERVER_ABORT);
+                    if (timeoutHandle) {
+                        clearTimeout(timeoutHandle);
+                    }
+                    timeoutHandle = undefined;
+                }
+            }
+
+            // add "extra" data to form if provided in options
+            var extraInputs = [];
+            try {
+                if (s.extraData) {
+                    for (var n in s.extraData) {
+                        if (s.extraData.hasOwnProperty(n)) {
+                           // if using the $.param format that allows for multiple values with the same name
+                           if($.isPlainObject(s.extraData[n]) && s.extraData[n].hasOwnProperty('name') && s.extraData[n].hasOwnProperty('value')) {
+                               extraInputs.push(
+                               $('<input type="hidden" name="'+s.extraData[n].name+'">').val(s.extraData[n].value)
+                                   .appendTo(form)[0]);
+                           } else {
+                               extraInputs.push(
+                               $('<input type="hidden" name="'+n+'">').val(s.extraData[n])
+                                   .appendTo(form)[0]);
+                           }
+                        }
+                    }
+                }
+
+                if (!s.iframeTarget) {
+                    // add iframe to doc and submit the form
+                    $io.appendTo('body');
+                }
+                if (io.attachEvent) {
+                    io.attachEvent('onload', cb);
+                }
+                else {
+                    io.addEventListener('load', cb, false);
+                }
+                setTimeout(checkState,15);
+
+                try {
+                    form.submit();
+                } catch(err) {
+                    // just in case form has element with name/id of 'submit'
+                    var submitFn = document.createElement('form').submit;
+                    submitFn.apply(form);
+                }
+            }
+            finally {
+                // reset attrs and remove "extra" input elements
+                form.setAttribute('action',a);
+                form.setAttribute('enctype', et); // #380
+                if(t) {
+                    form.setAttribute('target', t);
+                } else {
+                    $form.removeAttr('target');
+                }
+                $(extraInputs).remove();
+            }
+        }
+
+        if (s.forceSync) {
+            doSubmit();
+        }
+        else {
+            setTimeout(doSubmit, 10); // this lets dom updates render
+        }
+
+        var data, doc, domCheckCount = 50, callbackProcessed;
+
+        function cb(e) {
+            if (xhr.aborted || callbackProcessed) {
+                return;
+            }
+            
+            doc = getDoc(io);
+            if(!doc) {
+                log('cannot access response document');
+                e = SERVER_ABORT;
+            }
+            if (e === CLIENT_TIMEOUT_ABORT && xhr) {
+                xhr.abort('timeout');
+                deferred.reject(xhr, 'timeout');
+                return;
+            }
+            else if (e == SERVER_ABORT && xhr) {
+                xhr.abort('server abort');
+                deferred.reject(xhr, 'error', 'server abort');
+                return;
+            }
+
+            if (!doc || doc.location.href == s.iframeSrc) {
+                // response not received yet
+                if (!timedOut) {
+                    return;
+                }
+            }
+            if (io.detachEvent) {
+                io.detachEvent('onload', cb);
+            }
+            else {
+                io.removeEventListener('load', cb, false);
+            }
+
+            var status = 'success', errMsg;
+            try {
+                if (timedOut) {
+                    throw 'timeout';
+                }
+
+                var isXml = s.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc);
+                log('isXml='+isXml);
+                if (!isXml && window.opera && (doc.body === null || !doc.body.innerHTML)) {
+                    if (--domCheckCount) {
+                        // in some browsers (Opera) the iframe DOM is not always traversable when
+                        // the onload callback fires, so we loop a bit to accommodate
+                        log('requeing onLoad callback, DOM not available');
+                        setTimeout(cb, 250);
+                        return;
+                    }
+                    // let this fall through because server response could be an empty document
+                    //log('Could not access iframe DOM after mutiple tries.');
+                    //throw 'DOMException: not available';
+                }
+
+                //log('response detected');
+                var docRoot = doc.body ? doc.body : doc.documentElement;
+                xhr.responseText = docRoot ? docRoot.innerHTML : null;
+                xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc;
+                if (isXml) {
+                    s.dataType = 'xml';
+                }
+                xhr.getResponseHeader = function(header){
+                    var headers = {'content-type': s.dataType};
+                    return headers[header.toLowerCase()];
+                };
+                // support for XHR 'status' & 'statusText' emulation :
+                if (docRoot) {
+                    xhr.status = Number( docRoot.getAttribute('status') ) || xhr.status;
+                    xhr.statusText = docRoot.getAttribute('statusText') || xhr.statusText;
+                }
+
+                var dt = (s.dataType || '').toLowerCase();
+                var scr = /(json|script|text)/.test(dt);
+                if (scr || s.textarea) {
+                    // see if user embedded response in textarea
+                    var ta = doc.getElementsByTagName('textarea')[0];
+                    if (ta) {
+                        xhr.responseText = ta.value;
+                        // support for XHR 'status' & 'statusText' emulation :
+                        xhr.status = Number( ta.getAttribute('status') ) || xhr.status;
+                        xhr.statusText = ta.getAttribute('statusText') || xhr.statusText;
+                    }
+                    else if (scr) {
+                        // account for browsers injecting pre around json response
+                        var pre = doc.getElementsByTagName('pre')[0];
+                        var b = doc.getElementsByTagName('body')[0];
+                        if (pre) {
+                            xhr.responseText = pre.textContent ? pre.textContent : pre.innerText;
+                        }
+                        else if (b) {
+                            xhr.responseText = b.textContent ? b.textContent : b.innerText;
+                        }
+                    }
+                }
+                else if (dt == 'xml' && !xhr.responseXML && xhr.responseText) {
+                    xhr.responseXML = toXml(xhr.responseText);
+                }
+
+                try {
+                    data = httpData(xhr, dt, s);
+                }
+                catch (err) {
+                    status = 'parsererror';
+                    xhr.error = errMsg = (err || status);
+                }
+            }
+            catch (err) {
+                log('error caught: ',err);
+                status = 'error';
+                xhr.error = errMsg = (err || status);
+            }
+
+            if (xhr.aborted) {
+                log('upload aborted');
+                status = null;
+            }
+
+            if (xhr.status) { // we've set xhr.status
+                status = (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) ? 'success' : 'error';
+            }
+
+            // ordering of these callbacks/triggers is odd, but that's how $.ajax does it
+            if (status === 'success') {
+                if (s.success) {
+                    s.success.call(s.context, data, 'success', xhr);
+                }
+                deferred.resolve(xhr.responseText, 'success', xhr);
+                if (g) {
+                    $.event.trigger("ajaxSuccess", [xhr, s]);
+                }
+            }
+            else if (status) {
+                if (errMsg === undefined) {
+                    errMsg = xhr.statusText;
+                }
+                if (s.error) {
+                    s.error.call(s.context, xhr, status, errMsg);
+                }
+                deferred.reject(xhr, 'error', errMsg);
+                if (g) {
+                    $.event.trigger("ajaxError", [xhr, s, errMsg]);
+                }
+            }
+
+            if (g) {
+                $.event.trigger("ajaxComplete", [xhr, s]);
+            }
+
+            if (g && ! --$.active) {
+                $.event.trigger("ajaxStop");
+            }
+
+            if (s.complete) {
+                s.complete.call(s.context, xhr, status);
+            }
+
+            callbackProcessed = true;
+            if (s.timeout) {
+                clearTimeout(timeoutHandle);
+            }
+
+            // clean up
+            setTimeout(function() {
+                if (!s.iframeTarget) {
+                    $io.remove();
+                }
+                else { //adding else to clean up existing iframe response.
+                    $io.attr('src', s.iframeSrc);
+                }
+                xhr.responseXML = null;
+            }, 100);
+        }
+
+        var toXml = $.parseXML || function(s, doc) { // use parseXML if available (jQuery 1.5+)
+            if (window.ActiveXObject) {
+                doc = new ActiveXObject('Microsoft.XMLDOM');
+                doc.async = 'false';
+                doc.loadXML(s);
+            }
+            else {
+                doc = (new DOMParser()).parseFromString(s, 'text/xml');
+            }
+            return (doc && doc.documentElement && doc.documentElement.nodeName != 'parsererror') ? doc : null;
+        };
+        var parseJSON = $.parseJSON || function(s) {
+            /*jslint evil:true */
+            return window['eval']('(' + s + ')');
+        };
+
+        var httpData = function( xhr, type, s ) { // mostly lifted from jq1.4.4
+
+            var ct = xhr.getResponseHeader('content-type') || '',
+                xml = type === 'xml' || !type && ct.indexOf('xml') >= 0,
+                data = xml ? xhr.responseXML : xhr.responseText;
+
+            if (xml && data.documentElement.nodeName === 'parsererror') {
+                if ($.error) {
+                    $.error('parsererror');
+                }
+            }
+            if (s && s.dataFilter) {
+                data = s.dataFilter(data, type);
+            }
+            if (typeof data === 'string') {
+                if (type === 'json' || !type && ct.indexOf('json') >= 0) {
+                    data = parseJSON(data);
+                } else if (type === "script" || !type && ct.indexOf("javascript") >= 0) {
+                    $.globalEval(data);
+                }
+            }
+            return data;
+        };
+
+        return deferred;
+    }
+};
+
+/**
+ * ajaxForm() provides a mechanism for fully automating form submission.
+ *
+ * The advantages of using this method instead of ajaxSubmit() are:
+ *
+ * 1: This method will include coordinates for <input type="image" /> elements (if the element
+ *    is used to submit the form).
+ * 2. This method will include the submit element's name/value data (for the element that was
+ *    used to submit the form).
+ * 3. This method binds the submit() method to the form for you.
+ *
+ * The options argument for ajaxForm works exactly as it does for ajaxSubmit.  ajaxForm merely
+ * passes the options argument along after properly binding events for submit elements and
+ * the form itself.
+ */
+$.fn.ajaxForm = function(options) {
+    options = options || {};
+    options.delegation = options.delegation && $.isFunction($.fn.on);
+
+    // in jQuery 1.3+ we can fix mistakes with the ready state
+    if (!options.delegation && this.length === 0) {
+        var o = { s: this.selector, c: this.context };
+        if (!$.isReady && o.s) {
+            log('DOM not ready, queuing ajaxForm');
+            $(function() {
+                $(o.s,o.c).ajaxForm(options);
+            });
+            return this;
+        }
+        // is your DOM ready?  http://docs.jquery.com/Tutorials:Introducing_$(document).ready()
+        log('terminating; zero elements found by selector' + ($.isReady ? '' : ' (DOM not ready)'));
+        return this;
+    }
+
+    if ( options.delegation ) {
+        $(document)
+            .off('submit.form-plugin', this.selector, doAjaxSubmit)
+            .off('click.form-plugin', this.selector, captureSubmittingElement)
+            .on('submit.form-plugin', this.selector, options, doAjaxSubmit)
+            .on('click.form-plugin', this.selector, options, captureSubmittingElement);
+        return this;
+    }
+
+    return this.ajaxFormUnbind()
+        .bind('submit.form-plugin', options, doAjaxSubmit)
+        .bind('click.form-plugin', options, captureSubmittingElement);
+};
+
+// private event handlers
+function doAjaxSubmit(e) {
+    /*jshint validthis:true */
+    var options = e.data;
+    if (!e.isDefaultPrevented()) { // if event has been canceled, don't proceed
+        e.preventDefault();
+        $(e.target).ajaxSubmit(options); // #365
+    }
+}
+
+function captureSubmittingElement(e) {
+    /*jshint validthis:true */
+    var target = e.target;
+    var $el = $(target);
+    if (!($el.is("[type=submit],[type=image]"))) {
+        // is this a child element of the submit el?  (ex: a span within a button)
+        var t = $el.closest('[type=submit]');
+        if (t.length === 0) {
+            return;
+        }
+        target = t[0];
+    }
+    var form = this;
+    form.clk = target;
+    if (target.type == 'image') {
+        if (e.offsetX !== undefined) {
+            form.clk_x = e.offsetX;
+            form.clk_y = e.offsetY;
+        } else if (typeof $.fn.offset == 'function') {
+            var offset = $el.offset();
+            form.clk_x = e.pageX - offset.left;
+            form.clk_y = e.pageY - offset.top;
+        } else {
+            form.clk_x = e.pageX - target.offsetLeft;
+            form.clk_y = e.pageY - target.offsetTop;
+        }
+    }
+    // clear form vars
+    setTimeout(function() { form.clk = form.clk_x = form.clk_y = null; }, 100);
+}
+
+
+// ajaxFormUnbind unbinds the event handlers that were bound by ajaxForm
+$.fn.ajaxFormUnbind = function() {
+    return this.unbind('submit.form-plugin click.form-plugin');
+};
+
+/**
+ * formToArray() gathers form element data into an array of objects that can
+ * be passed to any of the following ajax functions: $.get, $.post, or load.
+ * Each object in the array has both a 'name' and 'value' property.  An example of
+ * an array for a simple login form might be:
+ *
+ * [ { name: 'username', value: 'jresig' }, { name: 'password', value: 'secret' } ]
+ *
+ * It is this array that is passed to pre-submit callback functions provided to the
+ * ajaxSubmit() and ajaxForm() methods.
+ */
+$.fn.formToArray = function(semantic, elements) {
+    var a = [];
+    if (this.length === 0) {
+        return a;
+    }
+
+    var form = this[0];
+    var formId = this.attr('id');
+    var els = semantic ? form.getElementsByTagName('*') : form.elements;
+    var els2;
+
+    if (els && !/MSIE [678]/.test(navigator.userAgent)) { // #390
+        els = $(els).get();  // convert to standard array
+    }
+
+    // #386; account for inputs outside the form which use the 'form' attribute
+    if ( formId ) {
+        els2 = $(':input[form="' + formId + '"]').get(); // hat tip @thet
+        if ( els2.length ) {
+            els = (els || []).concat(els2);
+        }
+    }
+
+    if (!els || !els.length) {
+        return a;
+    }
+
+    var i,j,n,v,el,max,jmax;
+    for(i=0, max=els.length; i < max; i++) {
+        el = els[i];
+        n = el.name;
+        if (!n || el.disabled) {
+            continue;
+        }
+
+        if (semantic && form.clk && el.type == "image") {
+            // handle image inputs on the fly when semantic == true
+            if(form.clk == el) {
+                a.push({name: n, value: $(el).val(), type: el.type });
+                a.push({name: n+'.x', value: form.clk_x}, {name: n+'.y', value: form.clk_y});
+            }
+            continue;
+        }
+
+        v = $.fieldValue(el, true);
+        if (v && v.constructor == Array) {
+            if (elements) {
+                elements.push(el);
+            }
+            for(j=0, jmax=v.length; j < jmax; j++) {
+                a.push({name: n, value: v[j]});
+            }
+        }
+        else if (feature.fileapi && el.type == 'file') {
+            if (elements) {
+                elements.push(el);
+            }
+            var files = el.files;
+            if (files.length) {
+                for (j=0; j < files.length; j++) {
+                    a.push({name: n, value: files[j], type: el.type});
+                }
+            }
+            else {
+                // #180
+                a.push({ name: n, value: '', type: el.type });
+            }
+        }
+        else if (v !== null && typeof v != 'undefined') {
+            if (elements) {
+                elements.push(el);
+            }
+            a.push({name: n, value: v, type: el.type, required: el.required});
+        }
+    }
+
+    if (!semantic && form.clk) {
+        // input type=='image' are not found in elements array! handle it here
+        var $input = $(form.clk), input = $input[0];
+        n = input.name;
+        if (n && !input.disabled && input.type == 'image') {
+            a.push({name: n, value: $input.val()});
+            a.push({name: n+'.x', value: form.clk_x}, {name: n+'.y', value: form.clk_y});
+        }
+    }
+    return a;
+};
+
+/**
+ * Serializes form data into a 'submittable' string. This method will return a string
+ * in the format: name1=value1&amp;name2=value2
+ */
+$.fn.formSerialize = function(semantic) {
+    //hand off to jQuery.param for proper encoding
+    return $.param(this.formToArray(semantic));
+};
+
+/**
+ * Serializes all field elements in the jQuery object into a query string.
+ * This method will return a string in the format: name1=value1&amp;name2=value2
+ */
+$.fn.fieldSerialize = function(successful) {
+    var a = [];
+    this.each(function() {
+        var n = this.name;
+        if (!n) {
+            return;
+        }
+        var v = $.fieldValue(this, successful);
+        if (v && v.constructor == Array) {
+            for (var i=0,max=v.length; i < max; i++) {
+                a.push({name: n, value: v[i]});
+            }
+        }
+        else if (v !== null && typeof v != 'undefined') {
+            a.push({name: this.name, value: v});
+        }
+    });
+    //hand off to jQuery.param for proper encoding
+    return $.param(a);
+};
+
+/**
+ * Returns the value(s) of the element in the matched set.  For example, consider the following form:
+ *
+ *  <form><fieldset>
+ *      <input name="A" type="text" />
+ *      <input name="A" type="text" />
+ *      <input name="B" type="checkbox" value="B1" />
+ *      <input name="B" type="checkbox" value="B2"/>
+ *      <input name="C" type="radio" value="C1" />
+ *      <input name="C" type="radio" value="C2" />
+ *  </fieldset></form>
+ *
+ *  var v = $('input[type=text]').fieldValue();
+ *  // if no values are entered into the text inputs
+ *  v == ['','']
+ *  // if values entered into the text inputs are 'foo' and 'bar'
+ *  v == ['foo','bar']
+ *
+ *  var v = $('input[type=checkbox]').fieldValue();
+ *  // if neither checkbox is checked
+ *  v === undefined
+ *  // if both checkboxes are checked
+ *  v == ['B1', 'B2']
+ *
+ *  var v = $('input[type=radio]').fieldValue();
+ *  // if neither radio is checked
+ *  v === undefined
+ *  // if first radio is checked
+ *  v == ['C1']
+ *
+ * The successful argument controls whether or not the field element must be 'successful'
+ * (per http://www.w3.org/TR/html4/interact/forms.html#successful-controls).
+ * The default value of the successful argument is true.  If this value is false the value(s)
+ * for each element is returned.
+ *
+ * Note: This method *always* returns an array.  If no valid value can be determined the
+ *    array will be empty, otherwise it will contain one or more values.
+ */
+$.fn.fieldValue = function(successful) {
+    for (var val=[], i=0, max=this.length; i < max; i++) {
+        var el = this[i];
+        var v = $.fieldValue(el, successful);
+        if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length)) {
+            continue;
+        }
+        if (v.constructor == Array) {
+            $.merge(val, v);
+        }
+        else {
+            val.push(v);
+        }
+    }
+    return val;
+};
+
+/**
+ * Returns the value of the field element.
+ */
+$.fieldValue = function(el, successful) {
+    var n = el.name, t = el.type, tag = el.tagName.toLowerCase();
+    if (successful === undefined) {
+        successful = true;
+    }
+
+    if (successful && (!n || el.disabled || t == 'reset' || t == 'button' ||
+        (t == 'checkbox' || t == 'radio') && !el.checked ||
+        (t == 'submit' || t == 'image') && el.form && el.form.clk != el ||
+        tag == 'select' && el.selectedIndex == -1)) {
+            return null;
+    }
+
+    if (tag == 'select') {
+        var index = el.selectedIndex;
+        if (index < 0) {
+            return null;
+        }
+        var a = [], ops = el.options;
+        var one = (t == 'select-one');
+        var max = (one ? index+1 : ops.length);
+        for(var i=(one ? index : 0); i < max; i++) {
+            var op = ops[i];
+            if (op.selected) {
+                var v = op.value;
+                if (!v) { // extra pain for IE...
+                    v = (op.attributes && op.attributes.value && !(op.attributes.value.specified)) ? op.text : op.value;
+                }
+                if (one) {
+                    return v;
+                }
+                a.push(v);
+            }
+        }
+        return a;
+    }
+    return $(el).val();
+};
+
+/**
+ * Clears the form data.  Takes the following actions on the form's input fields:
+ *  - input text fields will have their 'value' property set to the empty string
+ *  - select elements will have their 'selectedIndex' property set to -1
+ *  - checkbox and radio inputs will have their 'checked' property set to false
+ *  - inputs of type submit, button, reset, and hidden will *not* be effected
+ *  - button elements will *not* be effected
+ */
+$.fn.clearForm = function(includeHidden) {
+    return this.each(function() {
+        $('input,select,textarea', this).clearFields(includeHidden);
+    });
+};
+
+/**
+ * Clears the selected form elements.
+ */
+$.fn.clearFields = $.fn.clearInputs = function(includeHidden) {
+    var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; // 'hidden' is not in this list
+    return this.each(function() {
+        var t = this.type, tag = this.tagName.toLowerCase();
+        if (re.test(t) || tag == 'textarea') {
+            this.value = '';
+        }
+        else if (t == 'checkbox' || t == 'radio') {
+            this.checked = false;
+        }
+        else if (tag == 'select') {
+            this.selectedIndex = -1;
+        }
+        else if (t == "file") {
+            if (/MSIE/.test(navigator.userAgent)) {
+                $(this).replaceWith($(this).clone(true));
+            } else {
+                $(this).val('');
+            }
+        }
+        else if (includeHidden) {
+            // includeHidden can be the value true, or it can be a selector string
+            // indicating a special test; for example:
+            //  $('#myForm').clearForm('.special:hidden')
+            // the above would clean hidden inputs that have the class of 'special'
+            if ( (includeHidden === true && /hidden/.test(t)) ||
+                 (typeof includeHidden == 'string' && $(this).is(includeHidden)) ) {
+                this.value = '';
+            }
+        }
+    });
+};
+
+/**
+ * Resets the form data.  Causes all form elements to be reset to their original value.
+ */
+$.fn.resetForm = function() {
+    return this.each(function() {
+        // guard against an input with the name of 'reset'
+        // note that IE reports the reset function as an 'object'
+        if (typeof this.reset == 'function' || (typeof this.reset == 'object' && !this.reset.nodeType)) {
+            this.reset();
+        }
+    });
+};
+
+/**
+ * Enables or disables any matching elements.
+ */
+$.fn.enable = function(b) {
+    if (b === undefined) {
+        b = true;
+    }
+    return this.each(function() {
+        this.disabled = !b;
+    });
+};
+
+/**
+ * Checks/unchecks any matching checkboxes or radio buttons and
+ * selects/deselects and matching option elements.
+ */
+$.fn.selected = function(select) {
+    if (select === undefined) {
+        select = true;
+    }
+    return this.each(function() {
+        var t = this.type;
+        if (t == 'checkbox' || t == 'radio') {
+            this.checked = select;
+        }
+        else if (this.tagName.toLowerCase() == 'option') {
+            var $sel = $(this).parent('select');
+            if (select && $sel[0] && $sel[0].type == 'select-one') {
+                // deselect all other options
+                $sel.find('option').selected(false);
+            }
+            this.selected = select;
+        }
+    });
+};
+
+// expose debug var
+$.fn.ajaxSubmit.debug = false;
+
+// helper fn for console logging
+function log() {
+    if (!$.fn.ajaxSubmit.debug) {
+        return;
+    }
+    var msg = '[jquery.form] ' + Array.prototype.join.call(arguments,'');
+    if (window.console && window.console.log) {
+        window.console.log(msg);
+    }
+    else if (window.opera && window.opera.postError) {
+        window.opera.postError(msg);
+    }
+}
+
+}));
diff --git a/public/uploads/fenbi.png b/public/uploads/fenbi.png
new file mode 100644
index 0000000000000000000000000000000000000000..5603b7ab59896788b347d41ca9db4d8759acc8f5
GIT binary patch
literal 9758
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

literal 0
HcmV?d00001

diff --git a/public/uploads/test.txt b/public/uploads/test.txt
new file mode 100644
index 0000000..8eb3de3
--- /dev/null
+++ b/public/uploads/test.txt
@@ -0,0 +1 @@
+hahah ["test.rb", "test.txt", "2014011333_dingming.rar", "1.zip", "Exam", "2.pdf"]55
\ No newline at end of file
-- 
1.9.1

