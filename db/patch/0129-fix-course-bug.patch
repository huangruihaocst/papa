From b0473e042471ca687e82b3f1627563fa36f2f834 Mon Sep 17 00:00:00 2001
From: Alex Wang <ice_b0und@hotmail.com>
Date: Sat, 24 Oct 2015 01:02:33 +0800
Subject: [PATCH 129/150] fix course bug

---
 app/controllers/application_controller.rb     | 98 +++++++++++----------------
 app/views/courses/index.json.jbuilder         |  2 +
 app/views/courses/show.json.jbuilder          |  2 +-
 db/init_data/db.rb                            | 39 +++++------
 test/controllers/courses_controller_test.rb   |  2 +
 test/controllers/semesters_controller_test.rb | 39 +++++++++++
 test/test_helper.rb                           |  8 +++
 7 files changed, 113 insertions(+), 77 deletions(-)

diff --git a/app/controllers/application_controller.rb b/app/controllers/application_controller.rb
index af9cea5..89c0c63 100644
--- a/app/controllers/application_controller.rb
+++ b/app/controllers/application_controller.rb
@@ -16,9 +16,14 @@ class ApplicationController < ActionController::Base
 
   # the following class macro and two methods are token authentication helpers
   rescue_from TokenException, with: :invalid_token
+  rescue_from ActiveRecord::RecordNotFound, with: :resource_not_found
   def invalid_token(except)
     json_failed(except.message)
   end
+  def resource_not_found(except)
+    json_failed(REASON_RESOURCE_NOT_FOUND)
+  end
+
   # raise TokenException if authentication failure occurs
   def check_token(user_id, token_str = nil, teacher_required = false)
     raise TokenException.new(REASON_TOKEN_INVALID) unless user_id
@@ -30,17 +35,12 @@ class ApplicationController < ActionController::Base
     if token_str
       token = Token.find_by_token(token_str)
       # deny when teacher_required is required but the token is not a teacher
-      if token && token.user_id == user_id.to_i && (!teacher_required || token.user.is_teacher)
-        unless token.token_valid?
-          raise TokenException.new(REASON_TOKEN_TIMEOUT)
-        end
-      else
-        raise TokenException.new(REASON_TOKEN_INVALID)
-      end
+      raise TokenException.new(REASON_TOKEN_INVALID) unless token && token.user_id == user_id.to_i
+      raise TokenException.new(REASON_TOKEN_TIMEOUT) unless token.token_valid?
+      raise TokenException.new(REASON_PERMISSION_DENIED) unless !teacher_required || token.user.is_teacher
     elsif current_user
-      if current_user.id != user_id.to_i
-        raise TokenException.new(REASON_TOKEN_INVALID)
-      end
+      raise TokenException.new(REASON_PERMISSION_DENIED) unless current_user.id == user_id.to_i
+      raise TokenException.new(REASON_PERMISSION_DENIED) unless !teacher_required || current_user.is_teacher
     else
       raise TokenException.new(REASON_TOKEN_INVALID)
     end
@@ -49,59 +49,53 @@ class ApplicationController < ActionController::Base
 
   def check_login
     if params[:token]
-      token = Token.find_by_token(params[:token])
-      if token && token.user.is_a?(User) && token.token_valid?
-        token.user
-      else
+      begin
+        token = Token.find_by_token(params[:token])
+      rescue ActiveRecord::RecordNotFound
         raise TokenException.new(REASON_TOKEN_INVALID)
       end
+      raise TokenException.new(REASON_TOKEN_INVALID) unless token && token.user.is_a?(User) && token.token_valid?
+      token.user
+    elsif current_user
+      current_user
     else
-      if current_user
-        current_user
-      else
-        raise TokenException.new(REASON_TOKEN_INVALID)
-      end
+      raise TokenException.new(REASON_TOKEN_INVALID)
     end
   end
 
   def check_admin
     if params[:token]
-      token = Token.find_by_token(params[:token])
-      if token && token.user.is_a?(User) && token.token_valid? && token.user.is_admin?
-        token.user
-      else
+      begin
+        token = Token.find_by_token(params[:token])
+      rescue ActiveRecord::RecordNotFound
         raise TokenException.new(REASON_TOKEN_INVALID)
       end
+      raise TokenException.new(REASON_TOKEN_INVALID) unless token && token.user.is_a?(User)
+      raise TokenException.new(REASON_TOKEN_TIMEOUT) unless token.token_valid?
+      raise TokenException.new(REASON_PERMISSION_DENIED) unless token.user.is_admin?
+      token.user
+    elsif current_user
+      raise TokenException.new(REASON_PERMISSION_DENIED) unless current_user.is_admin?
+      current_user
     else
-      if current_user && current_user.is_admin?
-        current_user
-      else
-        raise TokenException.new(REASON_TOKEN_INVALID)
-      end
+      raise TokenException.new(REASON_TOKEN_INVALID)
     end
   end
 
   def check_teacher
     if params[:token]
       token = Token.find_by_token(params[:token])
-      if token && token.user.is_a?(User) && token.token_valid? && token.user.is_teacher?
-        token.user
-      else
-        raise TokenException.new(REASON_TOKEN_INVALID)
-      end
+      raise TokenException.new(REASON_TOKEN_INVALID) unless token && token.user.is_a?(User) && token.token_valid?
+      raise TokenException.new(REASON_PERMISSION_DENIED) unless token.user.is_teacher?
+      token.user
+    elsif current_user
+      raise TokenException.new(REASON_PERMISSION_DENIED) unless current_user.is_teacher?
+      current_user
     else
-      if current_user && current_user.is_teacher?
-        current_user
-      else
-        raise TokenException.new(REASON_TOKEN_INVALID)
-      end
+      raise TokenException.new(REASON_TOKEN_INVALID)
     end
   end
 
-  def check_token_type(token_str, type)
-
-  end
-
   def must_be_a_teacher_of(token, course)
     raise TokenException.new(REASON_TOKEN_INVALID) unless course && course.is_a?(Course)
 
@@ -111,25 +105,15 @@ class ApplicationController < ActionController::Base
         raise TokenException.new(REASON_TOKEN_INVALID) unless token
         user = token.user
       rescue
-        if current_user
-          user = current_user
-        else
-          raise TokenException.new(REASON_TOKEN_INVALID)
-        end
-      end
-    else
-      if current_user
-        user = current_user
-      else
         raise TokenException.new(REASON_TOKEN_INVALID)
       end
-    end
-
-    if course.teachers.include? user
-      true
     else
-      raise TokenException.new(REASON_PERMISSION_DENIED)
+      raise TokenException.new(REASON_TOKEN_INVALID) unless current_user
+      user = current_user
     end
+
+    raise TokenException.new(REASON_PERMISSION_DENIED) unless course.teachers.include?(user)
+    true
   end
 
   include ApplicationHelper::StatusRenderingHelpers
diff --git a/app/views/courses/index.json.jbuilder b/app/views/courses/index.json.jbuilder
index bb9bae9..87a6d88 100644
--- a/app/views/courses/index.json.jbuilder
+++ b/app/views/courses/index.json.jbuilder
@@ -4,6 +4,8 @@ json.courses do
   json.array!(@courses) do |course|
     json.extract! course, :id
     json.extract! course, :name
+    json.extract! course, :semester_id
+    json.extract! course, :description
   end
 end
 
diff --git a/app/views/courses/show.json.jbuilder b/app/views/courses/show.json.jbuilder
index befafd1..acf7aad 100644
--- a/app/views/courses/show.json.jbuilder
+++ b/app/views/courses/show.json.jbuilder
@@ -1,7 +1,7 @@
-
 json.status STATUS_SUCCESS
 json.course do
   json.id     @course.id
   json.name   @course.name
   json.semester_id @course.semester_id
+  json.description @course.description
 end
diff --git a/db/init_data/db.rb b/db/init_data/db.rb
index 8c3debe..7d6b916 100644
--- a/db/init_data/db.rb
+++ b/db/init_data/db.rb
@@ -1,30 +1,31 @@
-s = Semester.create(name: '2015')
+s0 = Semester.create(name: '2015')
 s1 = Semester.create(name: '2014')
 s2 = Semester.create(name: '2013')
 
-c1 = Course.create(name: 'os', description: '123', semester_id: s.id)
-l1 = c1.lessons.create(name: 'os-l1', start_time: Time.now, end_time: Time.now + 100.years, location: '5201')
-
+c1 = Course.create(name: 'os', description: '123', semester_id: s0.id)
+c2 = Course.create(name: 'ds', description: '123', semester_id: s0.id)
+c3 = Course.create(name: 'as', description: '123', semester_id: s0.id)
+c4 = Course.create(name: 'cs', description: '123', semester_id: s1.id)
 
-c2 = Course.create(name: 'ds', description: '中文', semester_id: s.id)
-c3 = Course.create(name: '语文', description: 'fuck', semester_id: s.id)
+l1 = c1.lessons.create(name: 'os-l1', start_time: Time.now, end_time: Time.now + 100.years, location: '5201')
+l2 = c1.lessons.create(name: 'os-l2', start_time: Time.now, end_time: Time.now + 100.years, location: '5201')
+l3 = c1.lessons.create(name: 'os-l3', start_time: Time.now, end_time: Time.now + 100.years, location: '5201')
+l4 = c2.lessons.create(name: 'ds-l1', start_time: Time.now, end_time: Time.now + 100.years, location: '5201')
 
+u0 = User.create(name:'admin', phone:'123', email:'a@b.c', password:'123', password_confirmation:'123', is_admin: true)
 u1 = User.create(name:'alex', phone:'123', email:'a@b.c', password:'123', password_confirmation:'123', is_teacher: true)
-u1.save
-
-TeachingCourse.create(user_id: u1.id, course_id: c1.id)
-
 u2 = User.create(name:'betty', phone:'222', email:'b@c.d', password:'123', password_confirmation:'123')
 u3 = User.create(name:'ciara', phone:'333', email:'c@d.e', password:'123', password_confirmation:'123')
+u4 = User.create(name:'delta', phone:'444', email:'d@d.e', password:'123', password_confirmation:'123')
+u5 = User.create(name:'gamma', phone:'555', email:'e@d.e', password:'123', password_confirmation:'123')
 
+TeachingCourse.create(user_id: u1.id, course_id: c1.id)
+Participation.create(user_id: u2.id, course_id: c1.id, role: ROLE_ASSISTANT)
+Participation.create(user_id: u3.id, course_id: c1.id, role: ROLE_ASSISTANT)
+Participation.create(user_id: u4.id, course_id: c1.id, role: ROLE_STUDENT)
+Participation.create(user_id: u5.id, course_id: c1.id, role: ROLE_STUDENT)
 
-p11 = Participation.create(user_id: u1.id, course_id: c1.id, role: ROLE_STUDENT)
-lesson_status1 = LessonStatus.create(user_id: u1.id, lesson_id: c1.lessons.first.id, creator_id: u1.id, score: 123)
-
-
-p12 = Participation.create(user_id: u1.id, course_id: c2.id, role: ROLE_ASSISTANT)
-p21 = Participation.create(user_id: u2.id, course_id: c1.id, role: ROLE_STUDENT)
-p22 = Participation.create(user_id: u2.id, course_id: c2.id, role: ROLE_STUDENT)
-p32 = Participation.create(user_id: u3.id, course_id: c3.id, role: ROLE_STUDENT)
-p33 = Participation.create(user_id: u3.id, course_id: c3.id, role: ROLE_STUDENT)
+LessonStatus.create(user_id: u4.id, lesson_id: l1.id, creator_id: u2.id, score: 123)
+LessonStatus.create(user_id: u5.id, lesson_id: l1.id, creator_id: u2.id, score: 111)
 
+puts '--- init_data created ---'
\ No newline at end of file
diff --git a/test/controllers/courses_controller_test.rb b/test/controllers/courses_controller_test.rb
index 082b17e..3efc775 100644
--- a/test/controllers/courses_controller_test.rb
+++ b/test/controllers/courses_controller_test.rb
@@ -13,6 +13,8 @@ class CoursesControllerTest < ActionController::TestCase
 
     assert_equal STATUS_SUCCESS, json['status']
     assert json['courses'].count > 0
+    assert_not_nil json['courses'][0]['name']
+    assert_not_nil json['courses'][0]['semester_id']
   end
 
   # GET /semester/1/courses.json
diff --git a/test/controllers/semesters_controller_test.rb b/test/controllers/semesters_controller_test.rb
index fab784b..9916dcd 100644
--- a/test/controllers/semesters_controller_test.rb
+++ b/test/controllers/semesters_controller_test.rb
@@ -12,6 +12,8 @@ class SemestersControllerTest < ActionController::TestCase
     assert_equal STATUS_SUCCESS, json['status']
     assert_not_nil json['semesters']
     assert json['semesters'].count > 0
+    assert_not_nil json['semesters'][0]['id']
+    assert_not_nil json['semesters'][0]['name']
   end
 
   # POST /semesters.json
@@ -27,6 +29,17 @@ class SemestersControllerTest < ActionController::TestCase
     assert_not_nil json['id']
   end
 
+  # POST /semesters.json
+  test 'should not add semester if not admin' do
+    user = User.last
+    sign_in user
+    assert_no_difference 'Semester.count' do
+      post :create, format: :json, semester: { name: '123' }
+    end
+    assert_json_status STATUS_FAIL
+    assert_json_reason REASON_PERMISSION_DENIED
+  end
+
   # PUT /semesters/1.json
   test 'should update semester' do
     admin = User.find_by_name('alex')
@@ -38,6 +51,17 @@ class SemestersControllerTest < ActionController::TestCase
     assert_json_success
   end
 
+  # PUT /semesters/1.json
+  test 'should not update semester if not admin' do
+    user = User.last
+    sign_in user
+
+    put :update, format: :json, id: Semester.first.id, semester: { name: 'update semester' }
+
+    assert_json_status STATUS_FAIL
+    assert_json_reason REASON_PERMISSION_DENIED
+  end
+
   # DELETE /semesters/1.json
   test 'should delete semester' do
     admin = User.find_by_name('alex')
@@ -50,12 +74,27 @@ class SemestersControllerTest < ActionController::TestCase
     assert_json_success
   end
 
+  # DELETE /semesters/1.json
+  test 'should not delete semester if not admin' do
+    user = User.last
+    sign_in user
+
+    assert_no_difference 'Semester.count' do
+      delete :destroy, format: :json, id: Semester.first.id
+    end
+
+    assert_json_status STATUS_FAIL
+    assert_json_reason REASON_PERMISSION_DENIED
+  end
+
   # GET /semesters/default.json
   test 'should get default semester' do
     get :default, format: :json
 
     assert_json_success
     assert_not_nil json['semester']
+    assert_not_nil json['semester']['id']
+    assert_not_nil json['semester']['name']
   end
 
 end
diff --git a/test/test_helper.rb b/test/test_helper.rb
index 36d023a..5dfc81f 100644
--- a/test/test_helper.rb
+++ b/test/test_helper.rb
@@ -15,6 +15,14 @@ class ActiveSupport::TestCase
     assert_equal STATUS_SUCCESS, json['status']
   end
 
+  def assert_json_status(status)
+    assert_equal status, json['status']
+  end
+
+  def assert_json_reason(reason)
+    assert_equal reason, json['reason']
+  end
+
 
   # Add more helper methods to be used by all tests here...
 end
-- 
1.9.1

